// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

package Bicache;

// The greeting service definition.
service ConsistentHash{
  // Sends a greeting
  //rpc HeartBeat(HeartBeatRequest) returns (HeartBeatReply) {}
  rpc HeartBeat(HeartBeatRequest) returns (HeartBeatReply) {}
  rpc AddNode(AddNodeRequest) returns (AddNodeReply) {}
  rpc FindSuccessor(FindSuccRequest) returns (FindSuccReply) {}
  rpc FindPreDecessor(FindPreDecessorRequest) returns (FindPreDecessorReply) {}
}

message AddNodeRequest{
  //该节点分配的位置
  string ip = 1;
  string port = 2;
  uint64 pos = 3;
}
message FingerItem{
  uint32 start = 1;
  uint32 interval = 2;
  uint32 successor = 3;
  string ip_port = 4;
}

message AddNodeReply{
  int32 status = 1;
  uint32 pre_node = 2;
  string pre_node_ip_port = 3;
  repeated FingerItem finger_table =4;
  repeated string host_list = 5;
  //deprecated, should not be used any more
  string msg = 256 ;
}

message HeartBeatRequest{
  //交换的信息
  //自己的 pos
  uint32 pos = 1;
  string host_ip = 2;
  string host_port = 3;
}

message HeartBeatReply{
  //自己的下游
  uint32 next_pos = 1;
  string next_node_ip_port = 2;
}

message FindSuccRequest{
  uint32 pos = 1;
}

message FindSuccReply{
  uint32 found = 1;
  uint32 successor = 2;
}

message FindPreDecessorRequest{
  uint32 pos = 1;
  uint32 node = 2;
}

message FindPreDecessorReply{
  uint32 found = 1;
  uint32 node = 2;
  uint32 successor = 3;
  string succ_ip_port = 4;
}